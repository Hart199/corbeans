buildscript {

	// Update 121 is required for ObjectInputFilter.
	// Updates [131, 161] also have zip compression bugs on MacOS (High Sierra).
	ext.java8_minUpdateVersion = '171'

	ext.corda_release_group = 'net.corda'
	ext.corda_release_version = '3.2-corda'
	ext.corda_gradle_plugins_version = '3.1.0'
	ext.kotlin_version = '1.2.51'
	//ext.junit_version = '4.12'
	ext.quasar_version = '0.7.9'

	// gradle-capsule-plugin:1.0.2 contains capsule:1.0.1
	// TODO: Upgrade gradle-capsule-plugin to a version with capsule:1.0.3
	ext.capsule_version = '1.0.1'
	ext.asm_version = '0.5.3'

	ext.artemis_version = '2.2.0'
	ext.jackson_version = '2.9.2'

	ext.spring_boot_version = '2.0.3.RELEASE'
	ext.spring_version = '5.0.8.RELEASE'

	ext.jackson_version = '2.9.5'
	ext.slf4j_version = '1.7.25'
	ext.log4j_version = '2.9.1'
	// https://github.com/rzwitserloot/lombok/issues/1716
	//ext.lombok_version = '1.16.20'
	//ext.junit_version = '4.12'
	ext.netty_version = '4.1.9.Final'
	ext.javax_servlet_version = '3.1.0'
	ext.propdeps_plugin_version = '0.0.10.RELEASE'
	ext.version_plugin_version = '0.17.0'

	ext.bouncycastle_version = '1.57'
	ext.guava_version = '21.0'
	ext.okhttp_version = '3.5.0'
	ext.netty_version = '4.1.9.Final'
	ext.typesafe_config_version = '1.3.1'

	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()

		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'http://repo.spring.io/plugins-release' }
	}

	dependencies {

		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

		classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version" \

		classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"

		classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
		classpath "io.spring.gradle:propdeps-plugin:$propdeps_plugin_version"
		classpath "com.github.ben-manes:gradle-versions-plugin:$version_plugin_version"

	}
}

plugins {
	// TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
	// but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
	// Version 1.0.2 of this plugin uses capsule:1.0.1
	id "us.kirchmeier.capsule" version "1.0.2"
}

// We need the following three lines even though they're inside an allprojects {} block below because otherwise
// IntelliJ gets confused when importing the project and ends up erasing and recreating the .idea directory, along
// with the run configurations. It also doesn't realise that the project is a Java 8 project and misconfigures
// the resulting import. This fixes it.
apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Check that we are running on a Java 8 JDK. The source/targetCompatibility values above aren't sufficient to
// guarantee this because those are properties checked by the Java plugin, but we're using Kotlin.
//
// We recommend a specific minor version (unfortunately, not checkable directly) because JavaFX adds APIs in
// minor releases, so we can't work with just any Java 8, it has to be a recent one.
if (!JavaVersion.current().java8Compatible)
	throw new GradleException("Corda requires Java 8, please upgrade to at least 1.8.0_$java8_minUpdateVersion")

subprojects {
	task allDeps(type: DependencyReportTask) {}
}

allprojects {

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	apply plugin: 'kotlin'
	apply plugin: 'kotlin-allopen'


	//tasks.withType(Test) {
		// Prevent the project from creating temporary files outside of the build directory.
		//systemProperties['java.io.tmpdir'] = buildDir
	//}

	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters"
	}

	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
		kotlinOptions {
			languageVersion = "1.2"
			apiVersion = "1.2"
			jvmTarget = "1.8"
			javaParameters = true   // Useful for reflection.
			freeCompilerArgs = ['-Xjvm-default=compatibility']
			allWarningsAsErrors = project.hasProperty('compilation.allWarningsAsErrors') ? project.property('compilation.allWarningsAsErrors').toBoolean() : true
		}
	}

	configurations{
		all {
			exclude group: 'commons-logging', module: 'commons-logging'
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'


			resolutionStrategy {
				// Force dependencies to use the same version of Kotlin as Corda.
				force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
				//force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

				// Force dependencies to use the same version of Guava as Corda.
				force "com.google.guava:guava:$guava_version"

				// Demand that everything uses our given version of Netty.
				eachDependency { details ->
					if (details.requested.group == 'io.netty' && details.requested.name.startsWith('netty-')) {
						details.useVersion netty_version
					}
				}
			}
		}
		compile {
			// We want to use SLF4J's version of these bindings: jcl-over-slf4j
			// Remove any transitive dependency on Apache's version.
			exclude group: 'commons-logging', module: 'commons-logging'

			// Netty-All is an uber-jar which contains every Netty module.
			// Exclude it to force us to use the individual Netty modules instead.
			exclude group: 'io.netty', module: 'netty-all'
		}
		runtime {
			// We never want isolated.jar on classPath, since we want to test jar being dynamically loaded as an attachment
			//exclude module: 'isolated'
		}
	}



	group = 'com.github.manosbatsis.corda.spring'
	version = '0.0.1-SNAPSHOT'

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
	}

}

apply plugin: 'idea'
idea {
	module {
		downloadJavadoc = false
		downloadSources = true
	}
}
//apply plugin: 'net.corda.plugins.cordapp'
//apply plugin: 'net.corda.plugins.cordformation'
//apply plugin: 'net.corda.plugins.quasar-utils'
/*
sourceSets {
	main {
		resources {
			srcDir "config/dev"
		}
	}
	test {
		resources {
			srcDir "config/test"
		}
	}
	*integrationTest {
		kotlin {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/kotlin')
		}
	}
}*/

/*
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}


task integrationTest(type: Test, dependsOn: []) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}
*/
/*
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
	directory "./build/nodes"
	node {
		name "O=Notary,L=London,C=GB"
		notary = [validating: true]
		p2pPort 10002
		rpcSettings {
			address("localhost:10003")
			adminAddress("localhost:10043")
		}
		cordapps = [
				//"$project.group:cordapp-contracts-states:$project.version",
				//"$project.group:cordapp:$project.version",
				"$corda_release_group:corda-finance:$corda_release_version"
		]
	}
	node {
		name "O=PartyA,L=London,C=GB"
		p2pPort 10005
		rpcSettings {
			address("localhost:10006")
			adminAddress("localhost:10046")
		}
		webPort 10007
		cordapps = [
				//"$project.group:cordapp-contracts-states:$project.version",
				//"$project.group:cordapp:$project.version",
				"$corda_release_group:corda-finance:$corda_release_version"
		]
		rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
	}
	node {
		name "O=PartyB,L=New York,C=US"
		p2pPort 10008
		rpcSettings {
			address("localhost:10009")
			adminAddress("localhost:10049")
		}
		webPort 10010
		cordapps = [
				//"$project.group:cordapp-contracts-states:$project.version",
				//"$project.group:cordapp:$project.version",
				"$corda_release_group:corda-finance:$corda_release_version"
		]
		rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
	}
}
*/
jar {
// Prevent the root project from building an unwanted dummy jar.
	enabled = false
}
