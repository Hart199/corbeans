
buildscript {
	ext {
		kotlin_version = '1.2.61'
		corda_release_group = 'net.corda'
		corda_release_version = '3.2-corda'
		corda_gradle_plugins_version = '3.1.0'
		quasar_version = '0.7.9'
		capsule_version = '1.0.1'
		asm_version = '0.5.3'
		junit_version = '4.12'
		slf4j_version = '1.7.25'

		spring_boot_version = '2.0.4.RELEASE'
		spring_version = '5.0.8.RELEASE'

		artemis_version = "2.2.0"
		jackson_version = "2.9.2"
		guava_version = '21.0'

		dependency_managemen_version ="1.0.6.RELEASE"
	}

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }

	}

	dependencies {
		// spring plugins
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath "io.spring.gradle:dependency-management-plugin:$dependency_managemen_version"

		// kotlin plugins
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"

		// corda plugins
		classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:api-scanner:$corda_gradle_plugins_version"

		// plugins for asciidoctor
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'

	}
}


plugins {
	// TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
	// but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
	// Version 1.0.2 of this plugin uses capsule:1.0.1
	id "us.kirchmeier.capsule" version "1.0.2"
	id "com.github.hierynomus.license" version "0.14.0"


}

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven { url 'https://dl.bintray.com/kotlin/exposed' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

allprojects {
	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
	}

	apply plugin: 'java'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-allopen'
	apply plugin: 'idea'
	apply plugin: 'license'

	group = 'com.github.manosbatsis.corbeans'
	version = '0.0.1-SNAPSHOT'

	configurations {
		all {
			resolutionStrategy {
				// Force dependencies to use the same version of Kotlin as Corda.
				force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
				force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

				// Force dependencies to use the same version of Guava as Corda.
				force "com.google.guava:guava:$guava_version"

			}
		}
		compile {
			// We want to use SLF4J's version of these bindings: jcl-over-slf4j
			// Remove any transitive dependency on Apache's version.
			exclude group: 'commons-logging', module: 'commons-logging'

			// Netty-All is an uber-jar which contains every Netty module.
			// Exclude it to force us to use the individual Netty modules instead.
			//exclude group: 'io.netty', module: 'netty-all'
		}
	}

	task allDeps(type: DependencyReportTask) {}

	license {
		header rootProject.file("${rootProject.rootDir}/etc/license/header-lgpl.txt")
		includes(["**/*.java", "**/*.kt"])
		mapping {
			kt='JAVADOC_STYLE'
		}
		strictCheck true
	}
}

configure([
		project(':spring-corda-beans'),
		project(':spring-corda-test'),
		project(':spring-corda-autoconfigure'),
		project(':spring-boot-corda-starter'),
		project(':corda-webserver-spring-boot')]) {

	apply plugin: 'kotlin-spring'
	//apply plugin: "kotlin-allopem"
	apply plugin: "kotlin-noarg"
	apply plugin: "io.spring.dependency-management"

	apply plugin: 'maven-publish'

	publishing {
		publications {
			maven(MavenPublication) {
				from components.java
				groupId rootProject.group
				artifactId project.name
				version rootProject.version
			}
		}
	}
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}

	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters"
	}
	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
		kotlinOptions {
			languageVersion = "1.1"
			apiVersion = "1.1"
			freeCompilerArgs = ["-Xjsr305=strict"]
			jvmTarget = "1.8"
			javaParameters = true   // Useful for reflection.
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	configurations {
		all*.exclude group: 'junit', module: 'junit'

		// We want to use SLF4J's version of these bindings: jcl-over-slf4j
		// Remove any transitive dependency on Apache's version.
		all*.exclude group: 'commons-logging', module: 'commons-logging'
		all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
		all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		all {
			exclude group: 'ch.qos.logback', module: 'logback-classic'
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
			resolutionStrategy {
				eachDependency { details ->
					// Force our version of artemis
					if (details.requested.group == 'org.apache.activemq' && details.requested.name.startsWith('artemis-')) {
						details.useVersion artemis_version
					}
				}
			}
		}
		compile {
			// Netty-All is an uber-jar which contains every Netty module.
			// Exclude it to force us to use the individual Netty modules instead.
			//exclude group: 'io.netty', module: 'netty-all'
		}

	}

	// Run unit tests using junit5
	test {
		useJUnitPlatform {
			exclude '**/*IntegrationTest.class'
		}
	}

	// Run integration tests using junit5
	task integrationTest(type: Test) {
		useJUnitPlatform {
			include '**/*IntegrationTest.class'

		}
	}

	dependencies{
		compile group: 'org.slf4j', name: 'slf4j-simple', version: "$slf4j_version"

		compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
		compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
		compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
		compile "com.fasterxml.jackson.module:jackson-module-kotlin"

		testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	}
}


//jar {
//	// Prevent the root project from building an unwanted dummy jar.
//	enabled = false
//}