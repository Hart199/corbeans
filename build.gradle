
buildscript {
	ext {
		arrow_version = "0.7.3"
		kotlin_version = '1.1.60'
		kotlinx_coroutines_version = '0.30.2'
		dokka_version = '0.9.17'

		corda_release_group = 'net.corda'
		corda_release_version = '3.3-corda'
		corda_gradle_plugins_version = '3.1.0'

		quasar_version = '0.7.9'
		capsule_version = '1.0.1'
		asm_version = '0.5.3'
		junit_version = '4.12'
		slf4j_version = '1.7.25'

		spring_boot_version = '2.0.6.RELEASE'
		springBootVersion = '2.0.6.RELEASE'
		spring_version = '5.0.10.RELEASE'

		artemis_version = "2.2.0"
		jackson_version = "2.9.5"
		guava_version = '21.0'

		h2 = '1.4.196'

		dependency_managemen_version ="1.0.6.RELEASE"

	}

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
		//maven { url  "https://dl.bintray.com/manosbatsis/corbeans" }


	}

	dependencies {

		// spring plugins
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
		classpath "io.spring.gradle:dependency-management-plugin:$dependency_managemen_version"

		// kotlin plugins
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"

		// corda plugins
		classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
		classpath "net.corda.plugins:api-scanner:$corda_gradle_plugins_version"

		// plugins for asciidoctor
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'

		// nebula
		//classpath "com.netflix.nebula:nebula-kotlin-plugin:1.3.10"
		classpath "com.netflix.nebula:nebula-release-plugin:9.0.0"
		classpath "com.netflix.nebula:nebula-publishing-plugin:8.1.0"
		classpath "com.netflix.nebula:nebula-bintray-plugin:4.0.2"
		// just silences a warning because by default an older version is transitively pulled in
		//classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.3"
	}
}

plugins {
	// TODO The capsule plugin requires the newer DSL plugin block.It would be nice if we could unify all the plugins into one style,
	// but the DSL has some restrictions e.g can't be used on the allprojects section. So we should revisit this if there are improvements in Gradle.
	// Version 1.0.2 of this plugin uses capsule:1.0.1
	id "us.kirchmeier.capsule" version "1.0.2"
	id "com.github.hierynomus.license" version "0.14.0"
	//id "nebula.kotlin" version "1.3.10"
	//id "nebula.release" version "9.0.0"
	//id "nebula.nebula-bintray" version "4.0.2"
	//id 'nebula.maven-publish' version '8.1.0'
}

apply plugin: 'org.jetbrains.dokka'

allprojects {

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()
		maven { url 'https://dl.bintray.com/kotlin/exposed' }
		maven { url 'https://jitpack.io' }
		maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
	}

	//version = "1.0.0"
	apply plugin: "nebula.release"
	apply plugin: 'nebula.publish-verification'
	group = 'com.github.manosbatsis.corbeans'
}
/*
repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven { url 'https://dl.bintray.com/kotlin/exposed' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}
*/
subprojects {
	apply from: "$rootDir/gradle/kotlin.gradle"
	apply from: "$rootDir/gradle/published.gradle"

	apply plugin: 'kotlin-spring'
	apply plugin: 'io.spring.dependency-management'

	apply plugin: 'idea'
	apply plugin: 'license'
	//apply plugin: 'kotlin-kapt' //optional

	configurations {
		all {
			exclude group: 'junit', module: 'junit'
			resolutionStrategy {
				eachDependency { details ->
					// Force our version of artemis
					if (details.requested.group == 'org.apache.activemq' && details.requested.name.startsWith('artemis-')) {
						details.useVersion artemis_version
					}
					// Force our version of jackson
					else if (details.requested.group.startsWith('com.fasterxml.jackson')) {
						details.useVersion jackson_version
					}
				}
				// Force dependencies to use the same version of Guava as Corda.
				force "com.google.guava:guava:$guava_version"
			}
		}

		dependencyManagement {
			imports {
				mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
			}
		}

		dependencies{
			implementation('org.springframework.boot:spring-boot-starter')
			implementation("org.jetbrains.kotlin:kotlin-stdlib-jre8")
			implementation("org.jetbrains.kotlin:kotlin-reflect")

			compileOnly('org.springframework.boot:spring-boot-configuration-processor')
			
			testImplementation('org.springframework.boot:spring-boot-starter-test')
			testImplementation("org.jetbrains.kotlin:kotlin-test")
			testImplementation('org.junit.jupiter:junit-jupiter-api')

			testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')

		}
	}

	task allDeps(type: DependencyReportTask) {}

	license {
		header rootProject.file("${rootProject.rootDir}/etc/license/header-lgpl.txt")
		includes(["**/*.java", "**/*.kt"])
		mapping {
			kt='JAVADOC_STYLE'
		}
		strictCheck true
	}
}

configurations {
	dokkapath
	dokkapath.description = "dokka project classpath"
}

dependencies {
	dokkapath fileTree (include: ['*.jar'])
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
	moduleName = "$rootProject.name"
	outputDirectory = "$buildDir/dokka"
	outputFormat = "html"
	processConfigurations = []

	sourceDirs = files(subprojects.collect {
		p ->

			def path = new File(p.projectDir, "/src/main/kotlin")

			def relativePath = rootDir.toPath().relativize(path.toPath()).toString()
			linkMapping {
				dir = path
				url = "https://....../blob/master/$relativePath"
				suffix = "#L"
			}

			return path
	})
}
